{"version":3,"sources":["../../src/index.js","App.js","reportWebVitals.js","index.js"],"names":["require","map","draw","SnapOptionsToolbar","opt","this","checkboxes","onRemoveOrig","onRemove","ctrl","_container","document","createElement","className","elContainer","forEach","b","addCheckbox","removeButton","elCheckbox","setAttribute","title","checked","initialState","classes","Array","c","classList","add","addEventListener","on","action","appendChild","removeEventListener","remove","MapboxDrawPro","options","modes","styles","otherOtions","customModes","MapboxDraw","draw_point","SnapPointMode","draw_polygon","SnapPolygonMode","draw_line_string","SnapLineMode","pinning_mode","mapboxGlDrawPinningMode","passing_mode_point","mapboxGlDrawPassingMode","passing_mode_line_string","passing_mode_polygon","scaleRotateMode","SRMode","cutPolygonMode","CutPolygonMode","splitPolygonMode","SplitPolygonMode","splitLineMode","SplitLineMode","freehandMode","FreehandMode","draw_rectangle","DrawRectangle","draw_rectangle_assisted","DrawRectangleAssisted","_modes","_styles","unionBy","RectRestrictStyles","SnapModeDrawStyles","SRStyle","addToolStyle","_options","bufferSize","bufferUnit","bufferSteps","snap","guides","userProperties","buttons","changeMode","err","console","error","areaLimit","parseInt","prompt","spliter","alert","message","canScale","canRotate","canTrash","rotatePivot","SRCenter","Center","scaleCenter","Opposite","singleRotationPoint","rotationPointRadius","canSelectFeatures","onAddOrig","onAdd","addOtherControls","placement","a","snapOptionsBar","e","target","setTimeout","addControl","additionalTools","addButton","elButton","App","mapboxGl","getRTLTextPluginStatus","setRTLTextPlugin","mapRef","useRef","useEffect","Map","container","current","style","center","zoom","pitch","interactive","hash","attributionControl","customAttribution","transformRequest","url","headers","window","once","resize","set","type","features","properties","id","geometry","coordinates","ref","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.faa71dd4.chunk.js","sourcesContent":["import MapboxDraw from '@mapbox/mapbox-gl-draw';\nrequire('@mapbox/mapbox-gl-draw/dist/mapbox-gl-draw.css');\n\nimport unionBy from 'lodash.unionby';\n\nimport { SnapPolygonMode, SnapPointMode, SnapLineMode, SnapModeDrawStyles } from 'mapbox-gl-draw-snap-mode';\nimport mapboxGlDrawPinningMode from 'mapbox-gl-draw-pinning-mode';\nimport mapboxGlDrawPassingMode from 'mapbox-gl-draw-passing-mode';\nimport { SRMode, SRCenter, SRStyle } from 'mapbox-gl-draw-scale-rotate-mode';\nimport CutPolygonMode from 'mapbox-gl-draw-cut-polygon-mode';\nimport SplitPolygonMode from 'mapbox-gl-draw-split-polygon-mode';\nimport SplitLineMode from 'mapbox-gl-draw-split-line-mode';\nimport FreehandMode from 'mapbox-gl-draw-freehand-mode';\nimport DrawRectangle, { DrawStyles as RectRestrictStyles } from 'mapbox-gl-draw-rectangle-restrict-area';\nimport DrawRectangleAssisted from '@geostarters/mapbox-gl-draw-rectangle-assisted-mode';\nimport { additionalTools, measurement, addToolStyle } from 'mapbox-gl-draw-additional-tools';\n\nrequire('./index.css');\nclass SnapOptionsToolbar {\n    constructor(opt) {\n        let ctrl = this;\n        ctrl.checkboxes = opt.checkboxes || [];\n        ctrl.onRemoveOrig = opt.draw.onRemove;\n    }\n    onAdd(map) {\n        let ctrl = this;\n        ctrl.map = map;\n        ctrl._container = document.createElement('div');\n        ctrl._container.className = 'mapboxgl-ctrl-group mapboxgl-ctrl';\n        ctrl.elContainer = ctrl._container;\n        ctrl.checkboxes.forEach((b) => {\n            ctrl.addCheckbox(b);\n        });\n        return ctrl._container;\n    }\n    onRemove(map) {\n        ctrl.checkboxes.forEach((b) => {\n            ctrl.removeButton(b);\n        });\n        ctrl.onRemoveOrig(map);\n    }\n    addCheckbox(opt) {\n        let ctrl = this;\n        var elCheckbox = document.createElement('input');\n        elCheckbox.setAttribute('type', 'checkbox');\n        elCheckbox.setAttribute('title', opt.title);\n        elCheckbox.checked = opt.initialState === 'checked';\n        elCheckbox.className = 'mapbox-gl-draw_ctrl-draw-btn';\n        if (opt.classes instanceof Array) {\n            opt.classes.forEach((c) => {\n                elCheckbox.classList.add(c);\n            });\n        }\n        elCheckbox.addEventListener(opt.on, opt.action);\n        ctrl.elContainer.appendChild(elCheckbox);\n        opt.elCheckbox = elCheckbox;\n    }\n    removeButton(opt) {\n        opt.elCheckbox.removeEventListener(opt.on, opt.action);\n        opt.elCheckbox.remove();\n    }\n}\n\nexport default class MapboxDrawPro extends MapboxDraw {\n    constructor(options) {\n        options = options || {};\n        const { modes, styles, otherOtions } = options;\n\n        const customModes = {\n            ...MapboxDraw.modes,\n            draw_point: SnapPointMode,\n            draw_polygon: SnapPolygonMode,\n            draw_line_string: SnapLineMode,\n            pinning_mode: mapboxGlDrawPinningMode,\n            passing_mode_point: mapboxGlDrawPassingMode(MapboxDraw.modes.draw_point),\n            passing_mode_line_string: mapboxGlDrawPassingMode(MapboxDraw.modes.draw_line_string),\n            passing_mode_polygon: mapboxGlDrawPassingMode(MapboxDraw.modes.draw_polygon),\n            scaleRotateMode: SRMode,\n            cutPolygonMode: CutPolygonMode,\n            splitPolygonMode: SplitPolygonMode,\n            splitLineMode: SplitLineMode,\n            freehandMode: FreehandMode,\n            draw_rectangle: DrawRectangle,\n            draw_rectangle_assisted: DrawRectangleAssisted,\n        };\n\n        const customOptions = {\n            bufferSize: 0.5,\n            bufferUnit: 'kilometers',\n            bufferSteps: 64,\n            snap: true,\n            // snapOptions: {\n            //   snapPx: 15,\n            //   snapToMidPoints: true,\n            // },\n            guides: false,\n            userProperties: true,\n        };\n\n        const _modes = { ...customModes, ...modes };\n        const _styles = unionBy(styles, RectRestrictStyles, SnapModeDrawStyles, SRStyle, addToolStyle, 'id');\n        const _options = { modes: _modes, styles: _styles, ...customOptions, ...otherOtions };\n\n        super(_options);\n\n        this.buttons = [\n            {\n                on: 'click',\n                action: () => {\n                    try {\n                        draw.changeMode('freehandMode');\n                    } catch (err) {\n                        console.error(err);\n                    }\n                },\n                classes: ['free-hand'],\n                title: 'Free-Hand Draw Mode tool',\n            },\n            {\n                on: 'click',\n                action: () => {\n                    try {\n                        draw.changeMode('draw_rectangle', {\n                            areaLimit: parseInt(prompt('Max Area? (empty for no restriction)')), // 5 * 1_000_000, // 5 km2, optional\n                            // escapeKeyStopsDrawing: true, // default true\n                            // allowCreateExceeded: false, // default false\n                            // exceedCallsOnEachMove: false, // default false\n                            // exceedCallback: (area) => console.log('exceeded!', area), // optional\n                            // areaChangedCallback: (area) => console.log('updated', area), // optional\n                        });\n                    } catch (err) {\n                        console.error(err);\n                    }\n                },\n                classes: ['draw-rectangle'],\n                title: 'Rectangle Draw Mode tool',\n            },\n            {\n                on: 'click',\n                action: () => {\n                    try {\n                        draw.changeMode('draw_rectangle_assisted');\n                    } catch (err) {\n                        console.error(err);\n                    }\n                },\n                classes: ['draw-rectangle-assisted'],\n                title: 'Assisted Rectangle Draw Mode tool',\n            },\n            {\n                on: 'click',\n                action: () => {\n                    try {\n                        draw.changeMode('splitLineMode', {\n                            spliter: prompt('Which Mode? (point, line_string, polygon)'),\n                        });\n                    } catch (err) {\n                        alert(err.message);\n                        console.error(err);\n                    }\n                },\n                classes: ['split-line'],\n                title: 'Split Line Mode tool',\n            },\n            {\n                on: 'click',\n                action: () => {\n                    try {\n                        draw.changeMode('splitPolygonMode');\n                    } catch (err) {\n                        alert(err.message);\n                        console.error(err);\n                    }\n                },\n                classes: ['split-polygon'],\n                title: 'Split Polygon Mode tool',\n            },\n            {\n                on: 'click',\n                action: () => {\n                    try {\n                        draw.changeMode('cutPolygonMode');\n                    } catch (err) {\n                        alert(err.message);\n                        console.error(err);\n                    }\n                },\n                classes: ['cut-polygon'],\n                title: 'Cut Polygon Mode tool',\n            },\n            {\n                on: 'click',\n                action: () => {\n                    try {\n                        draw.changeMode('scaleRotateMode', {\n                            // required\n                            canScale: true,\n                            canRotate: true, // only rotation enabled\n                            canTrash: false, // disable feature delete\n\n                            rotatePivot: SRCenter.Center, // rotate around center\n                            scaleCenter: SRCenter.Opposite, // scale around opposite vertex\n\n                            singleRotationPoint: true, // only one rotation point\n                            rotationPointRadius: 1.2, // offset rotation point\n\n                            canSelectFeatures: true,\n                        });\n                    } catch (err) {\n                        alert(err.message);\n                        console.error(err);\n                    }\n                },\n                classes: ['rotate-icon'],\n                title: 'Scale and Rotate Mode tool',\n            },\n            {\n                on: 'click',\n                action: () => {\n                    draw.changeMode('pinning_mode');\n                },\n                classes: ['pinning_mode'],\n                title: 'Pinning Mode tool',\n            },\n            // {\n            //     on: 'click',\n            //     action: () => {\n            //         draw.changeMode('passing_mode_point');\n            //     },\n            //     classes: ['passing_mode', 'point'],\n            //     title: 'Passing-Point tool',\n            // },\n            // {\n            //     on: 'click',\n            //     action: () => {\n            //         draw.changeMode('passing_mode_line_string', (info) => {\n            //             console.log(info);\n            //         });\n            //     },\n            //     classes: ['passing_mode', 'line'],\n            //     title: 'Passing-LineString tool',\n            // },\n            // {\n            //     on: 'click',\n            //     action: () => {\n            //         draw.changeMode('passing_mode_polygon');\n            //     },\n            //     classes: ['passing_mode', 'polygon'],\n            //     title: 'Passing-Polygon tool',\n            // },\n        ];\n\n        this.onAddOrig = this.onAdd;\n        this.onRemoveOrig = this.onRemove;\n\n        const addOtherControls = async (map, draw, placement) => {\n            const snapOptionsBar = new SnapOptionsToolbar({\n                draw,\n                checkboxes: [\n                    {\n                        on: 'change',\n                        action: (e) => {\n                            draw.options.snap = e.target.checked;\n                        },\n                        classes: ['snap_mode', 'snap'],\n                        title: 'Snap when Draw',\n                        initialState: 'checked',\n                    },\n                    {\n                        on: 'change',\n                        action: (e) => {\n                            draw.options.guides = e.target.checked;\n                        },\n                        classes: ['snap_mode', 'grid'],\n                        title: 'Show Guides',\n                    },\n                ],\n            });\n\n            setTimeout(() => {\n                map.addControl(additionalTools(draw), placement);\n                map.addControl(snapOptionsBar, placement);\n            }, 400);\n        };\n\n        this.onAdd = (map, placement) => {\n            this.map = map;\n            this.elContainer = this.onAddOrig(map, placement);\n\n            this.buttons.forEach((b) => {\n                this.addButton(b);\n            });\n\n            addOtherControls(map, this, placement);\n            return this.elContainer;\n        };\n\n        this.onRemove = (map) => {\n            this.buttons.forEach((b) => {\n                this.removeButton(b);\n            });\n            this.onRemoveOrig(map);\n        };\n\n        this.addButton = (opt) => {\n            var elButton = document.createElement('button');\n            elButton.className = 'mapbox-gl-draw_ctrl-draw-btn';\n            elButton.setAttribute('title', opt.title);\n            if (opt.classes instanceof Array) {\n                opt.classes.forEach((c) => {\n                    elButton.classList.add(c);\n                });\n            }\n            elButton.addEventListener(opt.on, opt.action);\n            this.elContainer.appendChild(elButton);\n            opt.elButton = elButton;\n        };\n\n        this.removeButton = (opt) => {\n            opt.elButton.removeEventListener(opt.on, opt.action);\n            opt.elButton.remove();\n        };\n    }\n}\n","import React, { useRef, useEffect } from 'react';\nimport mapboxGl from 'mapbox-gl';\n\nimport MapboxDrawPro from 'mapbox-gl-draw-geospatial-tools';\n\nimport './App.css';\n\nlet map;\nlet draw;\n\nfunction App() {\n    if (mapboxGl.getRTLTextPluginStatus() === 'unavailable')\n        mapboxGl.setRTLTextPlugin(\n            'https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-rtl-text/v0.2.3/mapbox-gl-rtl-text.js',\n            (err) => {\n                err && console.error(err);\n            },\n            true\n        );\n    let mapRef = useRef(null);\n\n    useEffect(() => {\n        map = new mapboxGl.Map({\n            container: mapRef.current || '',\n            style: `https://map.ir/vector/styles/main/mapir-xyz-light-style.json`,\n            center: [51.3857, 35.6102],\n            zoom: 10,\n            pitch: 0,\n            interactive: true,\n            hash: true,\n            attributionControl: true,\n            customAttribution: '© Map © Openstreetmap',\n            transformRequest: (url) => {\n                return {\n                    url: url,\n                    headers: {\n                        'x-api-key':\n                            'eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImp0aSI6ImRiZWU0YWU4OTk4OTA3MmQ3OTFmMjQ4ZDE5N2VhZTgwZWU2NTUyYjhlYjczOWI2NDdlY2YyYzIzNWRiYThiMzIzOTM5MDkzZDM0NTY2MmU3In0.eyJhdWQiOiI5NDMyIiwianRpIjoiZGJlZTRhZTg5OTg5MDcyZDc5MWYyNDhkMTk3ZWFlODBlZTY1NTJiOGViNzM5YjY0N2VjZjJjMjM1ZGJhOGIzMjM5MzkwOTNkMzQ1NjYyZTciLCJpYXQiOjE1OTA4MjU0NzIsIm5iZiI6MTU5MDgyNTQ3MiwiZXhwIjoxNTkzNDE3NDcyLCJzdWIiOiIiLCJzY29wZXMiOlsiYmFzaWMiXX0.M_z4xJlJRuYrh8RFe9UrW89Y_XBzpPth4yk3hlT-goBm8o3x8DGCrSqgskFfmJTUD2wC2qSoVZzQKB67sm-swtD5fkxZO7C0lBCMAU92IYZwCdYehIOtZbP5L1Lfg3C6pxd0r7gQOdzcAZj9TStnKBQPK3jSvzkiHIQhb6I0sViOS_8JceSNs9ZlVelQ3gs77xM2ksWDM6vmqIndzsS-5hUd-9qdRDTLHnhdbS4_UBwNDza47Iqd5vZkBgmQ_oDZ7dVyBuMHiQFg28V6zhtsf3fijP0UhePCj4GM89g3tzYBOmuapVBobbX395FWpnNC3bYg7zDaVHcllSUYDjGc1A', //dev api key\n                        'Mapir-SDK': 'reactjs',\n                    },\n                };\n            },\n        });\n\n        draw = new MapboxDrawPro();\n        window.draw = draw;\n\n        map.once('load', () => {\n            map.resize();\n            map.addControl(draw, 'top-right');\n            draw.set({\n                type: 'FeatureCollection',\n                features: [\n                    {\n                        type: 'Feature',\n                        properties: {},\n                        id: 'example-id',\n                        geometry: {\n                            type: 'Polygon',\n                            coordinates: [\n                                [\n                                    [51.41742415918904, 35.73019558439101],\n                                    [51.31319413385742, 35.702773908694724],\n                                    [51.378997493472525, 35.665562843119986],\n                                    [51.45008537540798, 35.67776544979942],\n                                    [51.46619566741822, 35.70822028156377],\n                                    [51.41742415918904, 35.73019558439101],\n                                ],\n                            ],\n                        },\n                    },\n                ],\n            });\n        });\n    }, []);\n\n    return (\n        <div className=\"map-wrapper\">\n            <div id=\"map\" ref={mapRef} />\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}